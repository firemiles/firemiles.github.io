<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>kubernetes - 标签 - firemiles 的个人博客</title><link>https://blog.firemiles.top/tags/kubernetes/</link><description>kubernetes - 标签 - firemiles 的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>miles.dev@outlook.comm (firemiles)</managingEditor><webMaster>miles.dev@outlook.comm (firemiles)</webMaster><lastBuildDate>Sun, 19 Jul 2020 22:17:49 +0800</lastBuildDate><atom:link href="https://blog.firemiles.top/tags/kubernetes/" rel="self" type="application/rss+xml"/><item><title>容器网络的怪问题</title><link>https://blog.firemiles.top/2020/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E7%9A%84%E6%80%AA%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 19 Jul 2020 22:17:49 +0800</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2020/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E7%9A%84%E6%80%AA%E9%97%AE%E9%A2%98/</guid><description><![CDATA[<p>案例太多，一次写完有点太难为我，我就想到哪写到哪，保持更新。</p>
<h2 id="长连接报文重传失败">长连接报文重传失败</h2>
<p>有个客户来找，说他们的应用Server端日志里经常有长连接中断的消息，需要我们定位中断的原因。</p>
<p>接到这个问题时属实挠头，看了客户的错误日志，一般中断发生的频率极低，一天只出现个位数，我们尝试复现问题未果。但是客户就是上帝，接了问题单就要定位，我们的SRE比较有毅力，一连抓了3天的报文，根据报错日志，把有问题的报文挑了出来，我们进行分析。</p>
<p>通过wireshark工具分析TCP流，我们发现有问题的报文都是连接时间超过2小时没有报文，然后Server端突然发送了一个报文，但是客户端并没有收到这个报文，重发几次后连接就中断了。定位到这儿问题已经很明显了，客户没有使用TCP keepalive，导致连接长时间没报文，最后报文在发出去后在 VPC 中被丢了。</p>
<p>VPC 一般只会在安全组位置进行丢包，这很可能是安全组导致的丢包。查看了安全组规则，确实没有放通Server到Client端的规则，只放通了Client到Server的规则，也就是说只能由Client主动连接Server端，反之不行。</p>
<p>安全组的实现一般会使用连接跟踪表，当Client端发起连接，和Server端建立TCP连接时，连接跟踪表会记录这条连接，允许Client和Server在这条连接上传输数据。但是连接跟踪表是有超时时间的，一般就2小时，当两小时没有报文命中时，就老化掉该规则，这时Server端再发送报文时，就被安全组拒绝了。客户的问题应该就是这个原因。</p>
<p>这种情况一般建议客户开启TCP keepalive，这个问题并不是容器网络特有的问题，普通网络都会遇到。</p>
<h2 id="长连接出现连接拒绝">长连接出现连接拒绝</h2>
<p>容器网络还遇到一个客户来找我们，说他们POC测试的时候发现测试多轮大量长连接访问容器中的Server时会有一定几率出现Connect Refused错误。</p>
<p>接到问题后祭出tcpdump神器进行抓包，先简单描述下网络路径：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">        访问NodePort                         DNAT成Pod IP        SNAT成GW IP
</span></span><span class="line"><span class="cl">Client --------------&gt; VM1 -----------&gt; DNAT ------------&gt; SNAT -------------&gt; Server Pod
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们抓两个位置的包 VM1 和 Server Pod，当出现Connect Refused时，Server Pod确实收到了报文，但是却回了一个RST报文。面对这种情况，头脑风暴分析了下可能的原因：</p>
<ol>
<li>nginx 有问题</li>
<li>连接数满了</li>
<li>连接被占用了</li>
</ol>
<ul>
<li>原因1不太可能</li>
<li>原因2我们查看了系统参数，连接数并没有达到上限，也排除</li>
<li>原因3我们在抓包的同时继续用netstat查看当前连接状态，发现当出现Connect Refusted报文时，果然连接仍然被占用着。</li>
</ul>
<p>为什么会连接冲突呢，问题肯定出在SNAT的过程中，SNAT挑选的源端口有问题。通过分析报文，突然发现这些长连接也有一个特点，连接建立后并没有数据的传输，只是一直占用的通道，看到这里心中已经对问题的根因有了大致的猜想，肯定和连接跟踪超时有关。查看了主机和容器的 <code>tcp_keepalive_time</code> 的值，果然主机配置了1800，容器是7200，不同的timeout值，使得主机在1800后释放了tcp连接，重新分配的源端口给新的连接，而容器并未释放，最终导致访问Server返回Connect Refused错误。</p>
<p>这种情况我们自然建议可以将主机的 <code>tcp_keepalive_time</code> 改回成 7200，和容器保持一致，基本避免了该错误的发生。</p>
]]></description></item><item><title>Load Balance 访问 Kubernetes Pod 源 IP 保留方案探索</title><link>https://blog.firemiles.top/2019/preserve-source-ip-in-k8s/</link><pubDate>Wed, 04 Sep 2019 22:21:59 +0000</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2019/preserve-source-ip-in-k8s/</guid><description><![CDATA[<p>Kuberentes 已经成为云计算事实上的基础设施，各大云服务厂商都推出了自己的Kubernets 集群托管服务。处于信息安全考虑，一些企业不允许自己的核心资产暴露在公共服务器上，公有云并不适合他们。一些云服务厂商嗅到了其中的商机，国外大厂OpenShift，国内云厂商阿里云、华为云、青云等纷纷顺势推出了基于Kubernetes的私有集群以及混合云的解决方案。</p>
<p>企业在选型方案是，网络能力往往是考量各解决方案优劣的一个重要指标，但是本文并不打算分析各厂商的网络方案（工作量太大，计划后续补上），而是主要聚焦 Kubernetes 集群中的一个小的网络特性，即 Kubernetes Load Balance Service 如何保留客户端源IP。</p>
<h2 id="现状">现状</h2>
<p>Kuberntes 的 Service Type 分为三种<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>：</p>
<ol>
<li>Cluster IP</li>
<li>NodePort</li>
<li>LoadBalancer</li>
</ol>
<p>以下我们基于 kube-proxy 的 iptables 模式或 ipvs 模式进行分析，不考虑 userspace 模式。</p>
<p><code>Type=ClusterIP</code> 的 Service 一般只支持集群内部访问，通过 iptables 规则或者 ipvs 规则完成 ClusterIP 到 Pod IP的转换，Kubernetes只对访问ClusterIP的流量进行DNAT，并不会进行SNAT，但是实际集群是否会进行 SNAT 还要看CNI网络插件实现，像calico、flannel等，流量必须经过主机网络空间的容器网络实现，并不需要进行SNAT，而一些基于IPVlan，VLAN，将网络直接接入容器的实现，则需要进行SNAT，保证回程流量能够经过主机网络空间，实现NAT转换。大致流量如图：</p>
<p></p>
<p><code>Type=NodePort</code> 的 Service 支持集群外访问，客户端通过访问节点的端口，在节点内通
过iptables 或ipvs 规则转发流量实现负载均衡，该模式下Kubernetes除了会对流量进行DNAT，还会进行SNAT，这是为了保证负载均衡到其他节点的流量能够回到该节点，进行NAT解除操作。可能有的用户不想要在节点上再进行一次负载均衡，并且想要保留 client ip，Kubernetes 很贴心的支持了这个选项，Service  <code>service.spec.externalTrafficPolicy</code> 字段设置成 <code>Local</code> 后，访问NodePort的流量就不再进行SNAT和负载均衡了。</p>
<p> <code>Type=LoadBalance</code> 的 Service 默认开启 SNAT，因为所有的 <code>Ready</code> 节点都是 LB 的后端，如果数据报文到了一个没有 endpoint 的节点，系统需要将该报文转发到其他节点。</p>
<p>如果是在 Google Kubernetes Engine/GCE，同样的设置<code>service.spec.externalTrafficPolicy</code> 为 <code>Local</code> 可以让没有endpoint 的节点 service 健康检查失败，移除LB后端，kubernetes不会将流量转发到其他节点，也就不再需要进行 SNAT，保留了源 IP。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">                      client
</span></span><span class="line"><span class="cl">                        <span class="p">|</span>
</span></span><span class="line"><span class="cl">                      lb VIP
</span></span><span class="line"><span class="cl">                     / ^
</span></span><span class="line"><span class="cl">                    v /
</span></span><span class="line"><span class="cl">health check ---&gt;   node <span class="m">1</span>   node <span class="m">2</span> &lt;--- health check
</span></span><span class="line"><span class="cl">        <span class="m">200</span>  &lt;---   ^ <span class="p">|</span>             ---&gt; <span class="m">500</span>
</span></span><span class="line"><span class="cl">                    <span class="p">|</span> V
</span></span><span class="line"><span class="cl">                 endpoint
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="loadbalancer-保留源-ip">LoadBalancer 保留源 IP</h2>
<p>LoadBalancer的工作模式有两种：</p>
<ol>
<li>作为代理，接收来自客户端的请求，同时建立新的连接请求，和后端服务器建立连接。这种情况下，后端服务器看到的源IP是LB的IP。</li>
<li>作为数据包转发器，客户端访问 LB 的 VIP，最终保持源IP和后端服务器建立连接。</li>
</ol>
<p>第一种模式的LB需要依赖协议通知客户端真实的源IP，例如 HTTP 的 X-FORWARD-FOR，或者proxy protocol。第二种模式天然保留了源IP，但是在kubernetes中，需要配合关闭SNAT，保留源IP进入Pod，同时<code>service.spec.healthCheckNodePort</code>可以帮助LB检测节点上是否存在endpoint，剔除不合格的node。</p>
<h3 id="direct-route">Direct Route</h3>
<p>Direct Route模式即LB作为路由器角色，将客户端的流量直接负载均衡，路由到后端节点，也就是上面提到的工作模式2.</p>
<p>DR 模式有几个限制<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>：</p>
<ol>
<li>VIP 的端口必须和RS服务的端口一致（DR模式只修改包的 mac 地址，不会修改IP及上层的内容）</li>
<li>RS 必须对 arp 做相关设置，lo 接口需要绑定VIP（使用iptables进行DNAT处理也是可行的<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>）</li>
<li>VIP 和 RIP 不需要在同一个网段，但是 Director 要有一个网口和 RS 是再同一个物理网络下</li>
</ol>
<p>支持该模式的开源方案有LVS和HAPROXY。</p>
<h4 id="lvs">LVS</h4>
<p></p>
<h4 id="haproxy">Haproxy</h4>
<p></p>
<h4 id="kubernetes">kubernetes</h4>
<p>Kubernetes 可以利用这两个组件实现 DR 模式源IP保留。</p>
<p></p>
<h3 id="proxy-protocol">PROXY Protocol</h3>
<p>PROXY Protocol 是HAProxy作者提出的一个协议<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>，通过在数据流前端加入一小段协议报文，实现源IP透传。该协议要求有 sender 和 receiver，两者需要匹配 proxy protocol，否则数据流解析就会有问题。目前已经有很多开源软件加入支持该协议，因此通过部署支持该协议的LB，如F5，以及在容器中加入支持proxy protocol的sidecar，例如nginx，envoy，可以实现源IP透传。</p>
<p></p>
<h3 id="toa">TOA</h3>
<p>TOA是一个内核模块，通过在TCP包中添加一个OPTION来传递客户端的源IP<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>。LB需要支持在TCP报文中插入该OPTION，节点通过安装TOA模块，修改getpeername()系统调用，让Pod内应用通过getpeername()获取到真实的源IP。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://kubernetes.io/docs/tutorials/services/source-ip/" target="_blank" rel="noopener noreffer">https://kubernetes.io/docs/tutorials/services/source-ip/</a>
&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="http://linbo.github.io/2017/08/20/lvs-dr" target="_blank" rel="noopener noreffer">http://linbo.github.io/2017/08/20/lvs-dr</a>
&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/load_balancer_administration/s1-lvs-direct-vsa" target="_blank" rel="noopener noreffer">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/load_balancer_administration/s1-lvs-direct-vsa</a>
&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://www.haproxy.com/blog/haproxy/proxy-protocol/" target="_blank" rel="noopener noreffer">https://www.haproxy.com/blog/haproxy/proxy-protocol/</a>
&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="http://www.just4coding.com/blog/2015/11/16/toa/" target="_blank" rel="noopener noreffer">http://www.just4coding.com/blog/2015/11/16/toa/</a>
&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description></item><item><title>Kubernetes API 开发（五）</title><link>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E4%BA%94/</link><pubDate>Wed, 26 Dec 2018 21:15:12 +0000</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E4%BA%94/</guid><description><![CDATA[<h2 id="添加一个新-api-version">添加一个新 API Version</h2>
<p>如果你要为一个 Group 添加一个新的 API Version，你可以从 <code>pkg/apis/&lt;group&gt;/&lt;existing-version&gt;</code> copy 到 <code>staging/src/k8s.io/api/&lt;group&gt;/&lt;existing-version&gt;</code> 目录中。</p>
<p>由于项目在飞速迭代，以下的内容有可能已经过时：</p>
<ul>
<li>你可以通过修改<a href="https://github.com/kubernetes/kubernetes/blob/v1.8.0-alpha.2/pkg/master/master.go#L381" target="_blank" rel="noopener noreffer">pkg/master/master.go.</a>
控制是否默认 API Version enable</li>
<li>你必须在<a href="https://github.com/kubernetes/kubernetes/blob/v1.11.0/pkg/apis/apps/install/install.go" target="_blank" rel="noopener noreffer">pkg/apis/group_name/install/install.go.</a>
中添加新 version</li>
<li>你必须在<a href="https://github.com/kubernetes/kubernetes/blob/v1.8.0-alpha.2/hack/lib/init.sh#L53" target="_blank" rel="noopener noreffer">hack/lib/init.sh#KUBE_AVAILABLE_GROUP_VERSIONS.</a>
中添加新version</li>
<li>你必须在<a href="https://github.com/kubernetes/kubernetes/blob/v1.8.2/hack/update-generated-protobuf-dockerized.sh#L44" target="_blank" rel="noopener noreffer">hack/update-generated-protobuf-dockerized.sh</a>
中添加新version，帮助生成protobuf IDL和marshallers</li>
<li>你必须在<a href="https://github.com/kubernetes/kubernetes/blob/v1.8.0-alpha.2/cmd/kube-apiserver/app/aggregator.go#L172" target="_blank" rel="noopener noreffer">cmd/kube-apiserver/app#apiVersionPriorities</a>
</li>
<li>你必须为新version安装storage <a href="https://github.com/kubernetes/kubernetes/blob/v1.8.0-alpha.2/pkg/registry/authentication/rest/storage_authentication.go" target="_blank" rel="noopener noreffer">pkg/registry/group_name/rest</a>
</li>
</ul>
<h2 id="添加一个新-api-group">添加一个新 API Group</h2>
<p>你需要在 <code>pkg/apis</code> 和 <code>staging/src/k8s.io/api</code> 中为 Group 创建新的目录。复制已有的 API Group 的目录结构，例如：<code>pkg/apis/authentication</code> 和 <code>staging/src/k8s.io/api/authentication</code>；用自己的 group 名替换 authentication，用自己的 version 替换旧的 version。替换 <a href="https://github.com/kubernetes/kubernetes/blob/v1.8.0-alpha.2/staging/src/k8s.io/api/authentication/v1/register.go#L47" target="_blank" rel="noopener noreffer">versioned</a>
 和 <a href="https://github.com/kubernetes/kubernetes/blob/v1.8.0-alpha.2/pkg/apis/authentication/register.go#L47" target="_blank" rel="noopener noreffer">internal</a>
 中 register.go 的 API Kinds，还有 install.go 中的 kinds (1.11版本后 install.go 不再需要修改kind)</p>
<p>你需要在代码中一些未知加入你的 API Group/Verison，并且参考 <a href="#%e6%b7%bb%e5%8a%a0%e4%b8%80%e4%b8%aa%e6%96%b0-API-Version" rel="">添加一个新 API Version</a>
 段落，需要重新生成前面提到的代码。</p>
<h2 id="更新-fuzzer">更新 fuzzer</h2>
<p>测试APIs的相互转换稳定性的一个方法是&quot;fuzz&quot;（填充随机值）到 API 对象中，并且把它们在不同版本的API间进行转换。这个一个很好的方法，能够暴露代码中丢失的信息和错误的假设前提。如果你添加了任意字段需要很好的格式化（测试不进行validation），或者你假设 slice 至少包含一个元素，你可能会得到 <code>serialization_test</code> 的错误返回。如果遇到了这类问题，你可以自定义 fuzz 方法满足要求。</p>
<p>fuzzer 可以在 <code>pkg/api/testing/fuzzer.go</code> 中找到。</p>
<h2 id="更新语义比较">更新语义比较</h2>
<p>非常非常少见的情况，但是还是简单说明。某些更新了 boject 的内容，用了不同的表达方式，但是又想要比较函数在比较旧的表达方式和新的表达方式时，能够通过语义进行对比。例如二进制格式化的10和十进制格式化的2语义上时相同的。Go 唯一支持的 Deep-Equal 是一个字段一个字段进行比特比较。</p>
<p>首先你不应该这么做，如果不可避免，你需要了解 <code>apiequality.Semantic.DeepEqual</code> routine，它支持自定义指定类型——　可以在<code>pkg/api/helper/helpers.go</code> 中找</p>
<p>还有一件事你可能需要了解：<code>unexported field</code>. Go 的 <code>relect</code> 包支持 <code>unexported fields</code>。但是我们不支持——<code>apiequality.Semantic.DeepEqual</code>. 幸运的时大部分 API Object 导出了所有的 fields. 但是有时你想要不导出字段（time.Time包含未导出字段），你可能需要在 <code>apiequality.Semantic.DeepEqual</code> 自定义函数。</p>
<h2 id="实现你的修改">实现你的修改</h2>
<p>到这里你已经完成了 API 的修改，接下来就是完成代码的实现。</p>
<h2 id="编写-end-to-end-tests">编写 end-to-end tests</h2>
<p>看以看这篇 <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/e2e-tests.md" target="_blank" rel="noopener noreffer">e2e doc</a>

文档学习如何为你的特性编写 end-to-end test。</p>
<h2 id="example-和-docs">Example 和 docs</h2>
<p>在最后，你通过了单元测试、e2e测试，但是还没有结束。你只是修改了 API，如果你修改了已存在的 API， 你必须要确定所有的例子和文档也同时更新。这其实很困难，尤其时在JSON和YAML中会默默丢弃未知的字段。你可以使用 <code>grep</code> 和 <code>ack</code> 来辅助。</p>
<p>如果你添加了功能，你需要考虑添加文档和例子：</p>
<p>通过运行以下脚本确认你跟个新了 swagger 和 OpenAPI spec：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hack/update-swagger-spec.sh
</span></span><span class="line"><span class="cl">hack/update-openapi-spec.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>API spec 的修改 commit 应该和其他的修改分开。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version</a>
</li>
</ul>]]></description></item><item><title>Kubernetes API 开发（四）</title><link>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E5%9B%9B/</link><pubDate>Sun, 16 Dec 2018 20:21:32 +0000</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E5%9B%9B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://firemiles-blog.oss-cn-shanghai.aliyuncs.com/2018-12-17-143714.jpg" referrerpolicy="no-referrer">
            </div><h2 id="生成代码">生成代码</h2>
<p>除了 <code>default-gen</code>, <code>deepcopy-gen</code>, <code>conversion-gen</code>, 和 <code>openapi-gen</code> 外，还有其他的生成器：</p>
<ul>
<li><code>go-to-protobuf</code></li>
<li><code>client-gen</code></li>
<li><code>lister-gen</code></li>
<li><code>informer-gen</code></li>
<li><code>codecgen</code> (使用 ugorji codec快速串行化json)</li>
</ul>
<p>大部分生成器基于 <a href="https://github.com/kubernetes/gengo" target="_blank" rel="noopener noreffer">gengo</a>
 ，拥有相同的命令行选项。 <code>--verify-only</code> 会检查磁盘上的将要生成的文件。</p>
<p>生成器生成代码时有个 <code>--go-header-file</code> 选项，该选项指定包含生成代码头部内容的文件。头部内容一般是版权信息，放在生成代码的最前面，并且会被稍后的 <a href="https://git.k8s.io/repo-infra/verify/verify-boilerplate.sh" target="_blank" rel="noopener noreffer">repo-infra/verify/verify-boilerplane.sh </a>
 脚本检查。</p>
<p>执行 <code>make update</code> 会调用一系列<a href="https://github.com/kubernetes/kubernetes/blob/v1.8.0-alpha.2/hack/update-all.sh#L63-L78" target="_blank" rel="noopener noreffer">脚本</a>
 包括以上的生成器。请继续阅读以下段落，因为某些生成器的使用需要一些先决条件，而且执行 <code>make update</code> 耗时太久，下面还会介绍如何单独调用生成器。</p>
<h3 id="generate-protobuf-objects">Generate protobuf objects</h3>
<p>对于任意 core API object ，我们需要生成 Protobuf IDL 和 marshallers。通过调用以下脚本生成：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hack/update-generated-protobuf.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>大部分 object 对于转换成 protobuf 不需要太多的考虑，但是我们需要注意哪些依赖 golang 标准库类型的的 object，可能需要提供一些额外的工作，实践上我们一般使用自定义的 JONST 串行化。<code>pkg/api/serialization_test.go</code> 会测试你的 protobuf 串行化，多运行几次确保没有非兼容的字段。</p>
<h3 id="generate-clientset">Generate Clientset</h3>
<p><code>client-gen</code> 是为顶层 API object 生成 clientsets 的工具。</p>
<p><code>client-gen</code> 要求每个想要导出的类型前添加 <code>// +genclient</code> 注释，包括 internal type <code>pkg/apis/&lt;group&gt;/types.go</code> 和 versioned type <code>staging/src/k8s.io/api/&lt;group&gt;/&lt;version&gt;/types.go</code> 。</p>
<p>如果 apiserver 注册的 API group 名字和文件系统中存储的 group 路径不相同（一般在文件系统中存储会删除 k8s.io 后缀，例如 admission vs admission.k8s.io），你可以在向 <code>client-gen</code> 指定正确的 group name，通过在 <code>doc.go</code> 添加 <code>// +groupName=</code> 注释，当然 internal version <code>pkg/apis/&lt;group&gt;/doc.go</code> 和 versioned API <code>staging/src/k8s.io/api/&lt;group&gt;/&lt;version&gt;/types.go</code> 都要添加。</p>
<p>添加 groupName 注释后，执行以下命令生成 client：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hack/update-codegen.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>你可以使用可选选项  <code>// +groupGoName=</code> 使用 Golang 驼峰标识符来为 group 指定别名, 解决冲突。例如 <code>policy.authorization.k8s.io</code> 和 <code>policy.k8s.io</code>。 这两个 group 默认都映射到 <code>Policy()</code> 这个名字的 client 中，这个时候就需要执行 groupGoName 来帮助区分这两个 client group 名。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// +groupName=example2.example.com  
</span></span></span><span class="line"><span class="cl"><span class="c1">// +groupGoName=SecondExample
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>第一个用来定义 RESTfully 接口的资源，第二个用来定义生成的 Golang 代码中的名字，例如在 clientset 中访问该 group verion：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">clientset</span><span class="p">.</span><span class="nf">SecondExampleV1</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>clent-gen 可配置性很强，如果你要为非 kubernets API 生成代码，可以看<a href="https://github.com/kubernetes/community/blob/master/contributors/devel/generating-clientset.md" target="_blank" rel="noopener noreffer">这篇文档</a>
</p>
<h3 id="generate-listers">Generate Listers</h3>
<p><code>lister-gen</code> 为 client 生成 lister。 这个复用 <code>// +genclient</code> 和 <code>// +groupName=</code> 注释，所有你不用指定额外的注释。</p>
<p>运行 <code>hack/update-codegen.sh</code> 脚本的时候会调用 <code>lister-gen</code>。</p>
<h3 id="generate-informers">Generate Informers</h3>
<p><code>informer-gen</code>  生成有用的 informers，用于监控 API 资源的变化. 这个复用 <code>// +genclient</code> 和 <code>// +groupName=</code> 注释，所有你不用指定额外的注释。</p>
<p>运行 <code>hack/update-codegen.sh</code> 脚本的时候会调用 <code>informer-gen</code>。</p>
<h3 id="edit-json-unmarshaling-code">Edit json (un)marshaling code</h3>
<p>我们只用自动生成的代码来为 API object 进行 marshalling 和 unmarshalling 操作 —— 这比 reflect 提高了系统性能。</p>
<p>自动生成的代码放在每个 versioned API 中：</p>
<ul>
<li><code>staging/src/k8s.io/api/&lt;group&gt;/&lt;version&gt;/generated.proto</code></li>
<li><code>staging/src/k8s.io/api/&lt;group&gt;/&lt;version&gt;/generated.pb.go</code></li>
</ul>
<p>运行一下脚本重新生成：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hack/update-generated-protobuf.sh
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version</a>
</li>
</ul>]]></description></item><item><title>Kubernetes API 开发（三）</title><link>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E4%B8%89/</link><pubDate>Fri, 14 Dec 2018 22:30:25 +0000</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E4%B8%89/</guid><description><![CDATA[<h2 id="修改-internal-structures-unversioned-api">修改 Internal structures (unversioned API)</h2>
<p>现在是时候开始介绍如何修改内部结构体，这样你修改的 versioned API 才能正常使用。</p>
<h3 id="edit-typesgo">Edit types.go</h3>
<p>和 versioned APIs 修改类似，内部结构体定义在 <code>pkg/apis/&lt;group&gt;/types.go</code> 中。想要修改什么内容就在这里完成，主要内部结构体必须兼容所有的 versioned APIs。</p>
<p>当然，你也必须添加 <code>+k8s:deepcopy-gen</code> tag 来告诉工具需要生成 DeepCopyObject 方法。</p>
<h3 id="edit-validationgo">Edit validation.go</h3>
<p>大部分情况下修改了内部结构体后，需要一些内部输入校验。校验代码放在 <code>pkg/apis/&lt;group&gt;/validation/validation.go</code> 。 这个校验对用户体验十分重要，提供良好的错误信息，保证用户的输入正确性。当错误发生的时候，告诉用户为什么以及如何修复。</p>
<p>当然，测试代码也是必须的—— <code>pkg/apis/&lt;group&gt;/validation/validation_test.go</code></p>
<h3 id="edit-version-conversions">Edit version conversions</h3>
<p>看到这里的时候，你已经完成了 versioned APIs 和 内部结构的修改。如果某些字段名，类型在内部结构和 versioned APIs中存在变化，你必须添加一些从内部结构转换成 versioned APIs的逻辑。如果你在执行 <code>serialization_test</code> 是发现了错误，它可能是在告诉你需要显示指定转换方法。</p>
<p>转换方法的性能会影响 apiserver 的流畅性。因此我们采用自动生成的代码而不是使用通用的转换代码（通用代码使用反射会有很高代价）</p>
<p>转换代码在每个 versionded API 下都有一份，有两个文件：</p>
<ul>
<li><code>pkg/apis/&lt;group&gt;/&lt;version&gt;/conversion.go</code> 包含手写的转换函数</li>
<li><code>pkg/apis/&lt;group&gt;/&lt;version&gt;/zz_generated.conversion.go </code> 包含自动生成的转换函数</li>
</ul>
<p>因为自动生成的转换代码会使用手写的转换代码，因此对手写的转换代码的命名有要求。例如，pkg <code>a</code> 中的类型 <code>X</code> 转换成 pkg <code>b</code> 中的类型 <code>Y</code>， 需要命名成: <code>convert_a_x_To_b_Y</code></p>
<p>你可以手写转换代码的时候同样可以引用自动生产的转换代码（为了提高效率也应该这样）。</p>
<p>手动添加的转换代码同样要求你添加 test <code>pkg/apis/&lt;group&gt;/&lt;version&gt;/conversion_test.go</code></p>
<p>当手动添加完必须的转换方法后，你需要重新生成 auto-generated 的代码。执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">make clean <span class="o">&amp;&amp;</span> make generaged_files
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>make clean</code> 很重要，否则生成的文件会是旧的版本，因为构建系统会使用用户的缓存文件。</p>
<p><code>make all</code> 也会调用 <code>make generated_files</code>。</p>
<p><code>make generated_files</code> 也会重新生成 <code>zz_generated.deepcopy.go</code>, <code>zz_generated.defaults.go</code> 和 <code>api/openapi-spec/swagger.json</code>。</p>
<p>如果生成中偶尔出现了编译错误，最简单的解决方法就是删除引起错误的文件重新生成（真暴力）</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version</a>
</li>
</ul>]]></description></item><item><title>Kubernetes API 开发（二）</title><link>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E4%BA%8C/</link><pubDate>Wed, 12 Dec 2018 21:52:51 +0000</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E4%BA%8C/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://firemiles-blog.oss-cn-shanghai.aliyuncs.com/2018-12-12-140900.jpg" referrerpolicy="no-referrer">
            </div><h2 id="修改-external-api版本api">修改 External API（版本API）</h2>
<p>修改版本API是所有修改中最简单的，只需要开发者保持修改后的API相互兼容，比从头写要一个新的 rest API 更容易。</p>
<h3 id="edit-typesgo">Edit types.go</h3>
<p>每个 API 结构体的定义放在 <code>staging/src/k8s.io/api/&lt;group&gt;/&lt;version&gt;/types.go</code> 中。修改这些文件可以实现 API 结构体的修改。</p>
<p>版本 API 内的所有类型和非内嵌字段需要在之前加上描述性注释——用于生成文档。类型注释不要包含类型名。这些注释生成的文档供用户查看，不应该向用户包含类型名。</p>
<p>如果类型需要生成 <a href="https://github.com/kubernetes/kubernetes/commit/8dd0989b395b29b872e1f5e06934721863e4a210#diff-6318847735efb6fae447e7dbf198c8b2R3767" target="_blank" rel="noopener noreffer">DeepCopyObject</a>
 方法，一般只在顶层类型上添加，例 <code>Pod</code> ，在类型前添加一行注释（<a href="https://github.com/kubernetes/kubernetes/commit/39d95b9b065fffebe5b6f233d978fe1723722085#diff-ab819c2e7a94a3521aecf6b477f9b2a7R30" target="_blank" rel="noopener noreffer">example</a>
）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">  <span class="c1">// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Optional 字段必须包含 <code>,omitempty</code> json tag;</p>
<h3 id="edit-defaultsgo">Edit defaults.go</h3>
<p>如果你在 type 中添加了新的字段，那么你可能需要修改默认值，需要在 <code>pkg/apis/&lt;group&gt;/&lt;version&gt;/defaults.go</code> 中添加 case。</p>
<blockquote>
<p><em>注意：</em> 当在给新字段添加默认值的时候，别忘记给所有版本都添加。<a href="https://github.com/kubernetes/kubernetes/issues/66135" target="_blank" rel="noopener noreffer">#66135</a>
</p>
</blockquote>
<p>老版本的 core ve API 比较特殊， 它的 <code>default.go</code> 过去放在 <code>pkg/api/v1/defaults.go</code>。如果你看到有引用这个路径，那可以确定那个代码过时了。现在 core v1 API 放在了 <code>pkg/apis/core/v1/defaults.go</code></p>
<p>当你添加完代码，最好再加上一个 test ：<code>pkg/apis/&lt;group&gt;/&lt;version&gt;/defaults_test.go</code></p>
<p>当你要区分变量是 <code>unset</code> 还是 <code>automatic zero</code> 时，最好使用指针。例如 <code>PodSpec.TerminationGracePeriodSeconds</code> 定义成 <code>*int64</code>。0值表示0秒，nil表示unset。</p>
<p>别忘了 <strong>run the tests</strong></p>
<h3 id="edit-conversiongo">Edit conversion.go</h3>
<p>当前还没有修改 internal 结构体，一般没有必要修改 conversion.go。我们会在后面的修改internal api 的章节说明。</p>
<p>当你进行了非兼容的修改后，以下的文件可能需要进行修改：
<code>pkg/apis/&lt;group&gt;/&lt;version&gt;/conversion.go</code>
<code>pkg/apis/&lt;group&gt;/&lt;version&gt;/conversion_test.go</code></p>
<p>注意 conversion machinery 并不能通用的处理各种类型的字段和API常量。<a href="https://github.com/kubernetes/client-go/blob/v4.0.0-beta.0/rest/request.go#L352" target="_blank" rel="noopener noreffer">The client library</a>
 自定义了字段引用的转换代码。你还需要为你的 scheme 的 <code>AddFieldLabelConversionFunc</code> 添加调用，帮助它支持字段转换，就像<a href="https://github.com/kubernetes/kubernetes/blob/v1.8.0-alpha.2/pkg/api/v1/conversion.go#L165" target="_blank" rel="noopener noreffer">这行代码</a>
</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version</a>
</li>
</ul>]]></description></item><item><title>Kubernetes API 开发（一）</title><link>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E4%B8%80/</link><pubDate>Sun, 09 Dec 2018 17:26:26 +0000</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2018/kubernetes-api-%E5%BC%80%E5%8F%91%E4%B8%80/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://firemiles-blog.oss-cn-shanghai.aliyuncs.com/2018-12-09-140421.jpg" referrerpolicy="no-referrer">
            </div><p>本文宏观介绍 <strong>kubernetes</strong> 的 <strong>API</strong> 各版本之间的联系以及 <strong>API</strong> 开发的原则。</p>
<h2 id="api-overview">API Overview</h2>
<h3 id="api-版本转换">API 版本转换</h3>
<p>Kubernetes 的 API 分为 <strong>Internal</strong> 和 <strong>External</strong> 版本。apiserver 同时支持多个API Version，在为开发提供了很高的自由度的同时也对API版本间的转换提出了更高的鲁棒性要求。</p>
<p>多个 external 版本间的转换， internal 版本处于中心位置，所有版本的 API 都能够转换成 internal 版本，但是其他版本之间能相互转换。所有的 kubernetes 代码 internal 版本结构中进行操作，并在存入<em>etcd</em> 前转换成 external 版本。客户端必须使用 external 版本操作。</p>
<p>以下是一个假设的操作例子：</p>
<ol>
<li>用户 <strong>POST</strong> <em>Pod</em> 到 <em>/api/v7beta1/&hellip;</em></li>
<li><strong>JSON</strong> unmarshall 为 <em>v7beta1.Pod</em></li>
<li>为 <em>v7beta1.Pod</em> 补充默认值</li>
<li><em>v7beta1.Pod</em> 转换成 <em>api.Pod</em></li>
<li>校验 <em>api.Pod</em> 并返回错误</li>
<li><em>api.Pod</em> 转换成 <em>v6.Pod</em> (稳定版本)</li>
<li><em>v6.Pod</em> marshall 成 <strong>JSON</strong> 并写入 <em>etcd</em></li>
</ol>
<h3 id="版本兼容">版本兼容</h3>
<p>Kubernets 把 API 的版本前向和后向兼容作为最高优先级进行考虑。
想要做到兼容很难，以下几点是实现 API 兼容需要考虑的：</p>
<ul>
<li>
<p>如果添加一个新功能，一定要是非必须的，要让旧版本也能正常工作</p>
</li>
<li>
<p>不要修改已有接口的定义，包括：</p>
<ul>
<li>默认值和默认行为，以及其包含的语义</li>
<li>已有 API 类型的字段和值的解释</li>
<li>字段是否是必须字段</li>
<li>可修改字段不要变为非可修改字段</li>
<li>非法字段不要变成合法字段</li>
</ul>
</li>
</ul>
<p>换个说法：</p>
<ol>
<li>所有修改前成功调用的 API， 修改后也要能成功调用。</li>
<li>所有不涉及修改的 API 调用，行为和修改前一致。</li>
<li>使用修改后的 API，在和未修改的 apiserver 通信时，不会导致问题。</li>
<li>API 修改支持在不同版本间转换，并不丢失信息。</li>
<li>旧版本的 client 不感知 server 端修改，仍然正常工作。</li>
<li>支持回退到之前不包含修改的 API 版本， 并且不影响没有使用修改部分代码的 client。所有被修改影响到的 API 对象能够隐式回退。</li>
</ol>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#making-a-new-api-version</a>
</li>
</ul>]]></description></item></channel></rss>