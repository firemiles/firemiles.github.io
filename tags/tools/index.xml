<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>tools - 标签 - Firemiles 的技术博客</title><link>https://blog.firemiles.top/tags/tools/</link><description>tools - 标签 - Firemiles 的技术博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>miles.dev@outlook.comm (firemiles)</managingEditor><webMaster>miles.dev@outlook.comm (firemiles)</webMaster><lastBuildDate>Sun, 24 Nov 2019 14:36:23 +0000</lastBuildDate><atom:link href="https://blog.firemiles.top/tags/tools/" rel="self" type="application/rss+xml"/><item><title>常见容器网络问题诊断</title><link>https://blog.firemiles.top/2019/%E5%B8%B8%E8%A7%81%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E8%AF%8A%E6%96%AD/</link><pubDate>Sun, 24 Nov 2019 14:36:23 +0000</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2019/%E5%B8%B8%E8%A7%81%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E8%AF%8A%E6%96%AD/</guid><description><![CDATA[<p>Kubernetes 的容器网络插件家族越来越庞大，各种模式层出不穷，但是万变不离其宗，overlay 和 underlay。overlay 常使用 vxlan 或者 ipip，underlay 使用 host-gw、bgp，或者结合云厂商提供的底层路由，如：vpc router，virtual switch；还有一类underlay 是目前各大云厂商主推的 eni（Elastic Network Interface）模式，将本来虚拟机使用的网卡插入到容器使用，使容器网络和虚拟机网络一样成为一等公民，拥有相同的网络访问权限，这个场景下容器网络被极度简化，大部分功能都由公有云虚拟机网络完成。</p>
<p>容器网络发展到现在，基本的组网方式已经十分成熟，抛开负载的性能优化问题不谈，网络功能问题的根因定位已经没多少新花样了，下面我就介绍下我在工作中使用的三板斧。</p>
<h2 id="系统配置">系统配置</h2>
<p>系统配置被修改导致网络行为改变，容器网络故障是最常出现的。</p>
<h3 id="sysctl">sysctl</h3>
<ul>
<li>net.ipv4.ip_forward（需要打开）</li>
<li>net.ipv4.conf.{all,interface}.rp_filter（非对称路由环境设置为0或2）</li>
<li>net.ipv4.tcp_tw_recycle（NAT环境关闭）</li>
<li>net.ipv4.tcp_tw_reuse</li>
</ul>
<p><code>net.ipv4.ip_forward</code> 控制主机是否允许转发数据报文，该值一般是 1，为0时常常导致容器访问service失败。</p>
<p><code>net.ipv4.conf.all.rp_filter</code> 控制系统是否开启对数据包源地址的校验。先看下文档中的介绍：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">rp_filter - INTEGER
</span></span><span class="line"><span class="cl">0 - No source validation.
</span></span><span class="line"><span class="cl">1 - Strict mode as defined in RFC3704 Strict Reverse Path
</span></span><span class="line"><span class="cl">    Each incoming packet is tested against the FIB and if the interface
</span></span><span class="line"><span class="cl">    is not the best reverse path the packet check will fail.
</span></span><span class="line"><span class="cl">    By default failed packets are discarded.
</span></span><span class="line"><span class="cl">2 - Loose mode as defined in RFC3704 Loose Reverse Path
</span></span><span class="line"><span class="cl">    Each incoming packet&#39;s source address is also tested against the FIB
</span></span><span class="line"><span class="cl">    and if the source address is not reachable via any interface
</span></span><span class="line"><span class="cl">    the packet check will fail.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">　　Current recommended practice in RFC3704 is to enable strict mode
</span></span><span class="line"><span class="cl">to prevent IP spoofing from DDos attacks. If using asymmetric routing
</span></span><span class="line"><span class="cl">or other complicated routing, then loose mode is recommended.
</span></span><span class="line"><span class="cl">　　The max value from conf/{all,interface}/rp_filter is used
</span></span><span class="line"><span class="cl">when doing source validation on the {interface}.
</span></span><span class="line"><span class="cl">　　Default value is 0. Note that some distributions enable itin startup scripts.
</span></span></code></pre></td></tr></table>
</div>
</div><p>即rp_filter参数有三个值，0，1，2，具体含义：</p>
<ul>
<li>0: 不开启源地址校验</li>
<li>1: 开启严格的反向路径校验，对每个进来的包，校验其反向路径是否最佳。如果不是最佳，则丢弃该数据包</li>
<li>2: 开启松散的反向路径校验。对每个进来的包，校验其反向源地址是否可达（通过任意网口），如果不可达，则丢弃该数据包。</li>
</ul>
<p>容器网络假如使用了非对称路由，rp_filter 一定要设置成2或者0.</p>
<p><code>net.ipv4.tcp_tw_recycle</code> 参数是为了服务端快速回收 <code>TIME_WAIT</code> 状态的 sockets 设置的，一些网络调优的文档可能会提到设置这个参数，但是该参数并不建议在 NAT(Network Address Translation) 环境中使用。</p>
<p>TCP 为了避免序列号反转的问题，使用时间戳（非标准时间，只是一个计数器）识别过时的报文并丢弃，即 PAWS(<a href="https://www.freesoft.org/CIE/RFC/1323/13.htm" target="_blank" rel="noopener noreffer">PROTECT AGAINST WRAPPED SEQUENCE NUMBERS</a>
)。默认PAWS是针对单个连接的，如果开启了 <code>net.ipv4.tcp_tw_recycle</code> ，为了解决重用 <code>TIME_WAIT</code> 导致的前一个连接发来的数据包在新连接中被当成有效数据包处理，Per-Connection 被升级成了 Per-Host。在SNAT环境中，来自不同HOST的连接被当成来自同一个HOST，导致时间戳数字小的友军会被系统误认为是过时报文丢弃。</p>
<blockquote>
<p>该参数在 Linux 4.1 内核中已经移除</p>
</blockquote>
<p><code>net.ipv4.tcp_tw_reuse</code> 和上一个 <code>net.ipv4.tcp_tw_recycle</code> 功能类似，主要用于客户端快速回收 <code>TIME_WAIT</code> 状态的 port 重用。该参数当前还没有发现明显的问题，打不开开都可以。</p>
<h3 id="iptables">iptables</h3>
<ul>
<li>iptalbes &ndash;policy FORWARD ACCEPT</li>
<li>DROP</li>
<li>SNAT</li>
</ul>
<p>数据包经过主机时第二道关口一般是 iptables，常常 tcpdump 抓到了数据包，但是应用就是没有收到，这个时候很可能是 iptables 把数据包过滤了。</p>
<p>大多数容器网络需要iptables默认接受数据包转发，即设置：<code>iptables --policy FORWARD ACCEPT</code>。</p>
<p>这个可以用 iptables -nvL FORWARD 查看当前默认规则。</p>
<p></p>
<p>iptables 还有其他规则可能导致丢包，使用 <code>iptables -nvL ｜ grep DROP</code> 查看丢包统计。</p>
<p>除了丢包，错误的处理 SNAT 也可能导致容器网络访问外网失败，可以查看 iptables 的 SNAT 规则，并在主机上抓包确认。</p>
<h3 id="route">route</h3>
<ul>
<li>default route</li>
<li>ip rule</li>
</ul>
<p>如果容器访问某个ip报错 <code>no route to host</code>，这个时候自然要查看下路由了。不光要排查容器内部，还要排查报文经过路径上的路由，并且需要注意 iptables 的 DNAT 规则改写目的ip，以及 <code>ip rule</code> 的 route table 查找规则。</p>
<h2 id="定位工具">定位工具</h2>
<p>当我们排查了一遍系统参数还没有头绪的时候，这个时候就该网络调试工具上场了。</p>
<ul>
<li>tcpdump</li>
<li>wireshark</li>
<li>netstat/ss</li>
<li>iptables</li>
<li>lsof – p PID</li>
</ul>
<p>使用 <code>tcpdump</code> 抓包是网络问题排查的常见手段。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">tcpdump -i eth0 tcp host 192.168.4.3 and port <span class="m">4789</span> -ne
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以将抓到的包信息写入文件放到 wireshark 中分析，可以得到更全面的信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">tcpdump -i eth0 tcp host 192.168.4.3 -w packet.pcap
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>netstat</code> 或 <code>ss</code> 命令用来查看当前连接统计信息，可以分析连接失败的原因。</p>
<p></p>
<p></p>
<p><code>iptables</code> 需要排查规则是否符合期望，具体使用可以参见 <a href="https://blog.firemiles.top/2019/03/16/iptables%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener noreffer">iptables快速入门</a>
</p>
<p><code>lsof</code> 可以用来查看进程占用的句柄数，有时候新的连接无法建立，可能是程序句柄泄露或者最大值设置太小（<code>ulimits -a</code>查看）</p>
<h2 id="配置扫描脚本">配置扫描脚本</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1">## green to echo </span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> green<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> -e <span class="s2">&#34;\033[32m[ </span><span class="nv">$1</span><span class="s2"> ]\033[0m&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">containerID</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">green kernel: <span class="sb">`</span>uname -r<span class="sb">`</span>
</span></span><span class="line"><span class="cl">green cni.conf
</span></span><span class="line"><span class="cl">cat /etc/cni/net.d/cni.conf
</span></span><span class="line"><span class="cl">green IP in container:
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti <span class="nv">$containerID</span> ip a s
</span></span><span class="line"><span class="cl">green Route in container:
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti <span class="nv">$containerID</span> ip r s
</span></span><span class="line"><span class="cl">green rp_filter in container:
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -ti <span class="nv">$containerID</span> sysctl -a<span class="p">|</span>grep rp_filter
</span></span><span class="line"><span class="cl">green route in host:
</span></span><span class="line"><span class="cl">ip r s
</span></span><span class="line"><span class="cl">green ip rule in host:
</span></span><span class="line"><span class="cl">ip rule
</span></span><span class="line"><span class="cl">green ip forward in host:
</span></span><span class="line"><span class="cl">sysctl sysctl net.ipv4.ip_forward
</span></span><span class="line"><span class="cl">iptables -nvL<span class="p">|</span>grep FORWARD
</span></span><span class="line"><span class="cl">green rp_filter in host:
</span></span><span class="line"><span class="cl">sysctl -a<span class="p">|</span>grep rp_filter
</span></span><span class="line"><span class="cl">green tcp_tw_recycle in host:
</span></span><span class="line"><span class="cl">sysctl net.ipv4.tcp_tw_recycle
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://computingforgeeks.com/netstat-vs-ss-usage-guide-linux/" target="_blank" rel="noopener noreffer">https://computingforgeeks.com/netstat-vs-ss-usage-guide-linux/</a>
</li>
</ul>
]]></description></item></channel></rss>