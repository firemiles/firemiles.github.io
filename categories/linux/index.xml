<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>linux - 分类 - firemiles 的个人博客</title><link>https://blog.firemiles.top/categories/linux/</link><description>linux - 分类 - firemiles 的个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>miles.dev@outlook.comm (firemiles)</managingEditor><webMaster>miles.dev@outlook.comm (firemiles)</webMaster><lastBuildDate>Sun, 22 May 2022 08:00:00 +0000</lastBuildDate><atom:link href="https://blog.firemiles.top/categories/linux/" rel="self" type="application/rss+xml"/><item><title>cgroupv2学习</title><link>https://blog.firemiles.top/2022/cgroupv2%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 22 May 2022 08:00:00 +0000</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2022/cgroupv2%E5%AD%A6%E4%B9%A0/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>这几年工作重心一直在容器网络方向，对虚拟化技术，容器隔离技术一直处于一知半解的状态，但是心里一直有着好奇，到底是怎样的技术，构建出了如今的容器化技术世界。项目中用到了cgroupV2，正好最近有时间，直接跳过cgroupV1学习了下cgroupV2的文档，这里分享内容主要来自<a href="https://arthurchiao.art/blog/cgroupv2-zh/" target="_blank" rel="noopener noreffer">官方权威文档中文翻译</a>。</p>
<h2 id="什么是cgroup">什么是cgroup</h2>
<p><code>cgroup</code> 是 &ldquo;control group&rdquo; 的缩写，并且首字母永远不大写。<code>cgroup</code> 是一种以 hierarchical (树形层级)方式组织进程的机制，以及在层级中以受控和可配置的方式分发系统资源。</p>
<ul>
<li>单数形式（cgroup）指这个特性，或用户 &ldquo;cgroup controllers&rdquo; 等术语中的修饰词</li>
<li>复数形式（cgroups） 显式地指多个cgroup</li>
</ul>
<p>cgroup 是 Linux 内核的一个功能，用来限制、控制与分离一个进程组的资源（如CPU、内存、磁盘输入输出等）。它最早由Google的工程师（主要是Paul Menage和Rohit Seth）在2006年发起，最早名称为进程容器（process containers）。在2007年时，因为在Linux内核中，容器（container）这个名词有许多不同的意义，为避免混乱，被重新命名为cgroup，并且被合并到2.6.24版的内核中去。</p>
<p>cgroups的一个设计目标是为不同的应用情况提供统一的接口，从控制单一进程（像nice）到作业系统层虚拟化（像OpenVZ，Linux-VServer，LXC）。cgroups 提供：</p>
<ul>
<li>资源限制：组可以被设置不超过设定的内存限制，包括虚拟内存。</li>
<li>优先级：一些组可能会得到大量的CPU或磁盘IO吞吐量。</li>
<li>结算：用来度量系统实际用了多少资源。</li>
<li>控制：冻结组或检查点和重启动。</li>
</ul>
<p>cgroup 主要由两部分组成：</p>
<ol>
<li><code>核心（core）</code>：主要负责层级化地组织进程；</li>
<li><code>控制器（controllers）</code>：大部分控制器负责cgroup层级中特定类型的系统资源分配，少部分utility控制器用于其他目的。</li>
</ol>
<h2 id="为什么会有cgroup">为什么会有cgroup</h2>
<p>在 Linux 里，一直依赖就有对进程进行分组的概念和需求，比如 <code>session group</code>, <code>progress group</code> 等，后来随着人们对这方面的需求越来越多，比如需要追踪一组进程的内存和IO 使用情况等，于是出现了cgroup，用来统一将进程进行分组，并在分组的基础上对进程进行监控和资源控制管理等。</p>
<p>在 <code>CentOS 7</code> 中，通过将cgroup层级系统与systemd单位树捆绑， 可以把资源管理设置从进程级别移至应用程序级别。默认情况下，systemd 会自动创建 <code>slice</code>、<code>scope</code>和<code>service</code>单位的层级，来为 cgroup 树提供统一结构，可以通过 <code>systemctl</code> 命令创建自定义slice进一步修改结构。</p>
<p></p>
<p>如上图所示，系统默认创建了3个顶级<code>slice</code>(<code>System</code>,<code>User</code>和<code>Machine</code>)。每个slice都会获得相同CPU使用时间，如果<code>user.slice</code>想要获得<code>100%</code>的CPU使用时间，而此时CPU比较空闲，那么<code>user.slice</code>就能如愿以偿。</p>
<h2 id="为什么会有cgroupv2">为什么会有cgroupV2</h2>
<p>cgroup v1 支持多个 hierarchy，每个hierarchy可以启用任意数量的controller。这种方式看上去高度灵活，但实际中并不是很有用。例如：</p>
<ol>
<li>utility 类型的 controller（例如freezer）本可用与多个hierarchy，而由于v1中每个controller只有一个实例，utility controller的作用就大打折扣；而hierarchy 一旦被populated之后，控制器就不能移动到其他hierarchy的事实，更是加剧了这个问题。</li>
<li>另一个问题是，关联到某个hierarchy的所有控制器，只能拥有相同的hierarchy视图。无法在controller粒度改变这种视图。</li>
</ol>
<p></p>
<p>在实际中，大部分hierarhchy都启动了所有控制器，而实际上只有联系非常紧密的控制器——例如cpu和cpuacct放到同一个hierarchy中才有意义。最终结果是：</p>
<ol>
<li>用户控件最后管理这多个非常类似的hierarchy</li>
<li>在执行hierarchy管理操作是，每个hierarchy上重复着相同的操作。</li>
</ol>
<h3 id="其他-cgroup-接口相关问题">其他 cgroup 接口相关问题</h3>
<p>v1的设计并没有前瞻性，因此后面引入了大量怪异特性和不一致性。</p>
<h2 id="cgroupv2的功能">cgroupV2的功能</h2>
<p>cgroup v2将多个hierarchy的方式变成了 unified hierarchy，并将所有的controller挂载到一个unified hierarchy。</p>
<p>当前kernel没有一处 cgroup v1版本，允许cgroup v1和v2共存，但是相同的controller不能同时mount到这两个不同的cgroup版本中。</p>
<blockquote>
<p>进程能否是同时属于cgroup v1和cgroup v2？可以的，查看 <code>/proc/$PID/cgroup</code> 会返现同时包含v1和v2 membership</p>
</blockquote>
<h3 id="进程线程与-cgroup-关系">进程/线程与 cgroup 关系</h3>
<p>所有cgroup组成一个树形结构。</p>
<ul>
<li>系统中的每个进程都属于且只属于某一个cgroup；</li>
<li>一个进程的所有线程属于同一个cgroup；</li>
<li>创建子进程时，继承其父进程的cgroup；</li>
<li>一个进程可以迁移到其他cgroup；</li>
<li>迁移一个进程时，子进程（后台进程）不会自动跟着一起迁移；</li>
</ul>
<h3 id="控制器">控制器</h3>
<p>可以选择性地针对一个cgroup启用或禁用某些控制器；</p>
<p>控制器的所有行为是hierarchical的。</p>
<ul>
<li>如果一个cgroup启用了某个控制器，它的sub-hierarchy中所有进程都会受控制</li>
<li>如果在更接近的root的节点上设置了资源限制，那下面的sub-hierarchy是无法覆盖也，也就是sub-hierarchy受parent限制。</li>
</ul>
<h3 id="基础操作">基础操作</h3>
<h4 id="挂载">挂载</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mount -t cgroup2 none <span class="nv">$MOUNT_POINT</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>cgroupv2 文件系统的magic number是<code>0x63677270</code>（&ldquo;cgrp&rdquo;）</p>
<ul>
<li>所有支持v2且未绑定到v1的控制器，会被自动绑定到v2的hierarchy，出现在root层级中。</li>
<li>v2中未使用的控制器也可以绑定到其他的hierarchies。</li>
</ul>
<p>这说明我们能以完全向后兼容的方式混用v2和v1 hierarchy。</p>
<h3 id="组织进程和线程">组织进程和线程</h3>
<h4 id="进程创建删除移动查看-cgroup">进程：创建/删除/移动/查看 cgroup</h4>
<p>初始状态下，只有root cgroup，所有进程都属于这个cgroup。</p>
<ul>
<li>创建sub-cgroup：只需要创建一个子目录
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir <span class="nv">$CGROUP_NAME</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<ul>
<li>
<p>将进程移动到指定cgroup：将PID写入到相应cgroup的cgroup.procs文件即可。</p>
<ul>
<li>每次<code>write(2)</code>只能迁移一个进程</li>
<li>如果进程有多个线程，那将任意线程PID写入到文件，都会将该进程的所有线程迁移到相应的cgroup。</li>
<li>如果进程fork出一个子进程，那子进程属于执行fork操作时父进程所属的cgroup。</li>
<li>进程退出（exit）后，仍然留在退出时它所属的cgroup，直到这个进程被收割（reap）；</li>
<li>僵尸进程不会出现在cgroup.procs中，因此无法对僵尸进程执行迁移操作。</li>
</ul>
</li>
<li>
<p>删除cgroup/sub-cgroup</p>
<ul>
<li>如果一个cgroup 已经没有任何children或活进程，那直接删除对应的文件夹就删除该cgroup了</li>
<li>如果一个cgroup已经没有children，但是还有僵尸进程，也认为这个cgroup是空的，可以直接删除</li>
</ul>
</li>
<li>
<p>查看进程的cgroup信息：<code>cat /proc/$PID/cgroup</code> 会列出该进程的 cgroup membership。如果启用了v1，这个文件可能会包含多行，每个hierarchy一行。v2对应的行永远是0::$PATH格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat /proc/<span class="nv">$$</span>/cgroup <span class="c1"># ubuntu 20.04 上的输出，$$ 是当前 shell 的进程 ID</span>
</span></span><span class="line"><span class="cl">12:devices:/user.slice
</span></span><span class="line"><span class="cl">11:freezer:/
</span></span><span class="line"><span class="cl">10:memory:/user.slice/user-1000.slice/session-1.scope
</span></span><span class="line"><span class="cl">9:hugetlb:/
</span></span><span class="line"><span class="cl">8:cpuset:/
</span></span><span class="line"><span class="cl">7:perf_event:/
</span></span><span class="line"><span class="cl">6:rdma:/
</span></span><span class="line"><span class="cl">5:pids:/user.slice/user-1000.slice/session-1.scope
</span></span><span class="line"><span class="cl">4:cpu,cpuacct:/user.slice
</span></span><span class="line"><span class="cl">3:blkio:/user.slice
</span></span><span class="line"><span class="cl">2:net_cls,net_prio:/
</span></span><span class="line"><span class="cl">1:name<span class="o">=</span>systemd:/user.slice/user-1000.slice/session-1.scope
</span></span><span class="line"><span class="cl">0::/user.slice/user-1000.slice/session-1.scope  <span class="c1"># v2</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="线程">线程</h4>
<ul>
<li>cgroup v2 的一部分控制器支持线程粒度的资源控制，这种控制器称为threaded controllers。
<ul>
<li>默认情况下，一个进程的所有线程属于同一个cgroup，</li>
<li>线程模型使我们能将不同线程放到subtree的不同位置，同时还能保持二者在同一个资源域（resource domain）内。</li>
</ul>
</li>
<li>不支持线程模型的控制器称为domain controllers。</li>
</ul>
<p>将cgroup改成threaded模式（单向/不可逆操作）
cgroup 创建之后都是domain cgroup，可以通过下面的命令将其改成threaded模式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> threaded &gt; cgroup.type
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="控制器-1">控制器</h3>
<ul>
<li>CPU</li>
<li>Memory</li>
<li>IO</li>
<li>PID</li>
<li>Cpuset</li>
<li>Device Controller（基于cgroup BPF）</li>
<li>RDMA</li>
<li>HugeTLB</li>
<li>Misc
<ul>
<li>perf_event</li>
</ul>
</li>
</ul>
<h3 id="cgroup-命名控件cgroupns">cgroup 命名控件（cgroupns）</h3>
<p>容器环境中用cgroup和其他一些namespace来隔离进程，但是<code>/proc/$PID/cgroup</code> 文件可能会泄露潜在的系统层信息。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat /proc/self/cgroup
</span></span><span class="line"><span class="cl">0::/batchjobs/container_id1 <span class="c1"># &lt;-- cgroup 的绝对路径，属于系统层信息，不希望暴露给隔离的进程</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因此引入了cgroup namespace。</p>
<h2 id="cgroupv2的实现">cgroupV2的实现</h2>
<h3 id="cgroup-控制接口">cgroup 控制接口</h3>
<p>
Linux 使用了多种数据结构在内核中实现了cgroups的配置，关联了进程和cgroups节点，那么Linux又是如何让用户态进程使用cgroups的功能呢？Linux内核有一个很大的模块叫VFS（Virtual File System）。VFS能够把具体的文件系统细节隐藏起来，给用户态进程提供一个同一个为文件系统API接口。cgrpus与CFS之间衔接的部分称之为cgroup文件系统。</p>
<h2 id="cgroupv2的典型应用">cgroupV2的典型应用</h2>
<p>听说cgroup是从docker开始，也是容器技术带火了cgroup技术，这里简单介绍下容器如何使用cgroup。</p>
<p></p>
<p></p>
<p></p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube-nocookie.com/embed/u8h0e84HxcE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://www.wikiwand.com/zh-hans/Cgroups" target="_blank" rel="noopener noreffer">https://www.wikiwand.com/zh-hans/Cgroups</a></li>
<li><a href="https://arthurchiao.art/blog/cgroupv2-zh/" target="_blank" rel="noopener noreffer">https://arthurchiao.art/blog/cgroupv2-zh/</a></li>
<li><a href="https://segmentfault.com/a/1190000040980305" target="_blank" rel="noopener noreffer">https://segmentfault.com/a/1190000040980305</a></li>
<li><a href="https://juejin.cn/post/6844904110639054861" target="_blank" rel="noopener noreffer">https://juejin.cn/post/6844904110639054861</a></li>
</ul>
]]></description></item><item><title>WSL2安装内核头文件</title><link>https://blog.firemiles.top/2022/wsl2%E5%AE%89%E8%A3%85%E5%86%85%E6%A0%B8%E5%A4%B4%E6%96%87%E4%BB%B6/</link><pubDate>Sat, 23 Apr 2022 20:36:23 +0000</pubDate><author>firemiles</author><guid>https://blog.firemiles.top/2022/wsl2%E5%AE%89%E8%A3%85%E5%86%85%E6%A0%B8%E5%A4%B4%E6%96%87%E4%BB%B6/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>一般 Linux 的发行版直接使用软件源就可以安装内核模块和内核头文件，但是WSL2作为一个特殊的版本，
大部分内核模块无法安装，也无法直接安装内核头文件，还有部分依赖内核头文件的工具也无法运行，本文主要介绍内核头文件的安装。</p>
<h2 id="安装">安装</h2>
<ul>
<li>
<p>第一步先去github上下载WSL2内核源码，仓库在 <a href="https://github.com/microsoft/WSL2-Linux-Kernel" target="_blank" rel="noopener noreffer">https://github.com/microsoft/WSL2-Linux-Kernel</a> 。下载当前运行的内核版本。这里以<code>4.19.121</code>为例</p>
</li>
<li>
<p>开始安装依赖</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">apt install libelf-dev build-essential pkg-config
</span></span><span class="line"><span class="cl">apt install bison build-essential flex libssl-dev libelf-dev bc
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>编译</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">tar -zvxf 4.19.121-microsoft-standard.tar.gz
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> WSL2-Linux-Kernel-4.19.121-microsoft-standard.tar.gz
</span></span><span class="line"><span class="cl">zcat /proc/config.gz &gt; .config
</span></span><span class="line"><span class="cl">make -j <span class="k">$(</span>nproc<span class="k">)</span>
</span></span><span class="line"><span class="cl">make -j <span class="k">$(</span>nproc<span class="k">)</span> modules_install
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>编译过程中可能会出现一些报错，一般是还缺少部分依赖，通过Google可以找到解决办法。</p>
</blockquote>
<p>编译完成后，在 /lib/modules/ 会出现 4.19.121-microsoft-standard 目录，头文件就可以使用了，借助头文件，其他的内核模块也可以自行编译安装。</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://mashiro01.github.io/2020/08/24/wsl2%E4%B8%8B%E5%86%85%E6%A0%B8%E5%A4%B4%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener noreffer">WSL2 下的 kernel header 的安装</a></li>
</ul>
]]></description></item></channel></rss>